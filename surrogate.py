import numpy as np
from scipy.interpolate import RegularGridInterpolator


def model_f(k, load, speed, angle):

    # Grids
    x = np.array([0, 21500, 30400, 41100, 50600], dtype=float)     # load
    y = np.arange(0, 11, dtype=float)                              # speed
    z = np.arange(0, 17, dtype=float)                              # angle (degrees)

    wear = np.zeros((11, 5, 17), dtype=float)

    # Wear at empty trailer (unit: g/m at wheel width)
    wear[1:11, 1, 1:17] = np.array([
        [3.995e-03, 1.567e-02, 3.439e-02, 5.954e-02, 9.062e-02, 0.1271, 0.1683, 0.2138, 0.2626, 0.3144, 0.3686, 0.4251, 0.4828, 0.5417, 0.6021, 0.6635],
        [4.136e-03, 0.01662, 0.03713, 0.06521, 0.1003, 0.1419, 0.1893, 0.2416, 0.2980, 0.3580, 0.4212, 0.4871, 0.5547, 0.6241, 0.6954, 0.7684],
        [4.277e-03, 0.01756, 0.03988, 0.07087, 0.1101, 0.1568, 0.2102, 0.2695, 0.3335, 0.4017, 0.4737, 0.5491, 0.6266, 0.7065, 0.7888, 0.8733],
        [4.419e-03, 0.01851, 0.04262, 0.07654, 0.1198, 0.1717, 0.2311, 0.2973, 0.3689, 0.4454, 0.5263, 0.6111, 0.6985, 0.7888, 0.8822, 0.9782],
        [4.560e-03, 0.01945, 0.04537, 0.08221, 0.1295, 0.1866, 0.2520, 0.3251, 0.4044, 0.4891, 0.5788, 0.6730, 0.7704, 0.8712, 0.9755, 1.083],
        [4.701e-03, 0.02040, 0.04811, 0.08788, 0.1392, 0.2015, 0.2730, 0.3530, 0.4398, 0.5328, 0.6314, 0.7350, 0.8423, 0.9536, 1.069, 1.188],
        [4.842e-03, 0.02134, 0.05086, 0.09354, 0.1489, 0.2164, 0.2939, 0.3810, 0.4753, 0.5765, 0.6839, 0.7970, 0.9142, 1.036, 1.162, 1.293],
        [4.984e-03, 0.02228, 0.05360, 0.09921, 0.1587, 0.2312, 0.3148, 0.4086, 0.5107, 0.6202, 0.7365, 0.8590, 0.9861, 1.118, 1.256, 1.398],
        [5.125e-03, 0.02323, 0.05635, 0.1049, 0.1684, 0.2461, 0.3358, 0.4365, 0.5462, 0.6639, 0.7890, 0.9210, 1.058, 1.201, 1.349, 1.503],
        [5.266e-03, 0.02417, 0.05909, 0.1105, 0.1781, 0.2610, 0.3567, 0.4643, 0.5816, 0.7076, 0.8416, 0.9829, 1.130, 1.283, 1.442, 1.608]
    ])

    # Wear at under-load
    wear[1:11, 2, 1:17] = np.array([
        [7.065e-03, 0.02758, 0.06004, 0.1031, 0.1560, 0.2169, 0.2846, 0.3566, 0.4313, 0.5074, 0.5838, 0.6611, 0.7390, 0.8178, 0.8971, 0.9772],
        [7.357e-03, 0.02945, 0.06531, 0.1138, 0.1739, 0.2437, 0.3211, 0.4034, 0.4885, 0.5748, 0.6619, 0.7503, 0.8400, 0.9312, 1.024, 1.118],
        [7.649e-03, 0.03133, 0.07058, 0.1244, 0.1918, 0.2704, 0.3577, 0.4503, 0.5456, 0.6422, 0.7400, 0.8394, 0.9408, 1.045, 1.150, 1.259],
        [7.942e-03, 0.03320, 0.07586, 0.1351, 0.2097, 0.2972, 0.3942, 0.4971, 0.6028, 0.7097, 0.8180, 0.9286, 1.042, 1.158, 1.277, 1.399],
        [8.234e-03, 0.03508, 0.08113, 0.1458, 0.2276, 0.3239, 0.4307, 0.5439, 0.6599, 0.7771, 0.8961, 1.018, 1.143, 1.271, 1.404, 1.540],
        [8.526e-03, 0.03695, 0.08640, 0.1564, 0.2455, 0.3507, 0.4672, 0.5908, 0.7171, 0.8445, 0.9741, 1.107, 1.244, 1.385, 1.530, 1.681],
        [8.819e-03, 0.03883, 0.09168, 0.1671, 0.2634, 0.3774, 0.5037, 0.6377, 0.7742, 0.9120, 1.052, 1.196, 1.344, 1.498, 1.657, 1.821],
        [9.111e-03, 0.04070, 0.09695, 0.1778, 0.2813, 0.4041, 0.5402, 0.6845, 0.8314, 0.9794, 1.130, 1.285, 1.445, 1.612, 1.783, 1.962],
        [9.403e-03, 0.04258, 0.1022, 0.1884, 0.2992, 0.4309, 0.5768, 0.7314, 0.8885, 1.047, 1.208, 1.374, 1.546, 1.725, 1.910, 2.103],
        [9.696e-03, 0.04445, 0.1075, 0.1991, 0.3171, 0.4576, 0.6133, 0.7782, 0.9457, 1.114, 1.286, 1.463, 1.647, 1.838, 2.037, 2.243]
    ])

    # Wear at nominal load
    wear[1:11, 3, 1:17] = np.array([
        [9.916e-03, 0.04010, 0.08911, 0.1554, 0.2361, 0.3265, 0.4214, 0.5185, 0.6158, 0.7130, 0.8113, 0.9111, 1.012, 1.115, 1.219, 1.325],
        [0.01039, 0.04326, 0.09806, 0.1732, 0.2650, 0.3672, 0.4733, 0.5811, 0.6889, 0.7971, 0.9077, 1.021, 1.137, 1.256, 1.377, 1.502],
        [0.01087, 0.04642, 0.1070, 0.1910, 0.2939, 0.4079, 0.5252, 0.6437, 0.7620, 0.8813, 1.004, 1.131, 1.262, 1.397, 1.536, 1.678],
        [0.01135, 0.04958, 0.1159, 0.2088, 0.3229, 0.4486, 0.5771, 0.7064, 0.8351, 0.9655, 1.100, 1.241, 1.386, 1.537, 1.694, 1.855],
        [0.01183, 0.05274, 0.1249, 0.2267, 0.3518, 0.4893, 0.6289, 0.7690, 0.9082, 1.050, 1.197, 1.350, 1.511, 1.678, 1.852, 2.032],
        [0.01231, 0.05590, 0.1339, 0.2445, 0.3808, 0.5300, 0.6808, 0.8316, 0.9814, 1.134, 1.293, 1.460, 1.635, 1.819, 2.010, 2.209],
        [0.01279, 0.05906, 0.1430, 0.2623, 0.4097, 0.5708, 0.7327, 0.8943, 1.054, 1.218, 1.389, 1.570, 1.760, 1.959, 2.168, 2.385],
        [0.01327, 0.06222, 0.1517, 0.2801, 0.4386, 0.6115, 0.7846, 0.9569, 1.128, 1.302, 1.486, 1.680, 1.885, 2.100, 2.326, 2.562],
        [0.01375, 0.06538, 0.1607, 0.2979, 0.4676, 0.6522, 0.8365, 1.020, 1.201, 1.386, 1.582, 1.790, 2.009, 2.241, 2.484, 2.739],
        [0.01423, 0.06854, 0.1696, 0.3157, 0.4965, 0.6929, 0.8884, 1.082, 1.274, 1.470, 1.679, 1.900, 2.134, 2.382, 2.642, 2.915]
    ])

    # Wear at over-load
    wear[1:11, 4, 1:17] = np.array([
        [0.01160, 0.04722, 0.1057, 0.1852, 0.2826, 0.3935, 0.5115, 0.6312, 0.7511, 0.8707, 0.9910, 1.113, 1.237, 1.363, 1.491, 1.622],
        [0.01220, 0.05118, 0.1169, 0.2075, 0.3191, 0.4455, 0.5783, 0.7113, 0.8441, 0.9772, 1.112, 1.251, 1.393, 1.539, 1.689, 1.842],
        [0.01280, 0.05514, 0.1281, 0.2299, 0.3556, 0.4975, 0.6451, 0.7914, 0.9371, 1.084, 1.234, 1.388, 1.549, 1.715, 1.886, 2.062],
        [0.01340, 0.05910, 0.1394, 0.2522, 0.3922, 0.5495, 0.7119, 0.8715, 1.030, 1.190, 1.355, 1.526, 1.704, 1.890, 2.083, 2.283],
        [0.01400, 0.06306, 0.1506, 0.2746, 0.4287, 0.6015, 0.7788, 0.9516, 1.123, 1.297, 1.477, 1.664, 1.860, 2.066, 2.281, 2.503],
        [0.01460, 0.06702, 0.1618, 0.2970, 0.4653, 0.6535, 0.8456, 1.032, 1.216, 1.403, 1.598, 1.802, 2.016, 2.242, 2.478, 2.723],
        [0.01520, 0.07100, 0.1730, 0.3193, 0.5020, 0.7055, 0.9125, 1.112, 1.309, 1.510, 1.719, 1.940, 2.172, 2.418, 2.675, 2.944],
        [0.01581, 0.07495, 0.1842, 0.3417, 0.5383, 0.7575, 0.9793, 1.192, 1.402, 1.616, 1.841, 2.077, 2.328, 2.594, 2.872, 3.164],
        [0.01641, 0.07891, 0.1954, 0.3640, 0.5749, 0.8094, 1.046, 1.272, 1.495, 1.723, 1.962, 2.215, 2.484, 2.769, 3.070, 3.384],
        [0.01701, 0.08287, 0.2066, 0.3864, 0.6114, 0.8614, 1.113, 1.352, 1.588, 1.829, 2.083, 2.353, 2.640, 2.945, 3.268, 3.605]
    ])

    # Build interpolator on (y, x, z) to match array axes
    interp = RegularGridInterpolator(
        (y, x, z),
        wear,
        method='linear',           
        bounds_error=False,
        fill_value=None            # allow extrapolation if slightly outside grid
    )

    # Ensure inputs are arrays; accept scalars or arrays
    load = np.asarray(load, dtype=float)
    speed = np.asarray(speed, dtype=float)
    angle_deg = np.asarray(angle, dtype=float) * 180.0 / np.pi  # radians â†’ degrees
    angle_deg = np.abs(angle_deg)

    # Prepare query points of shape (N, 3) ordered as (y, x, z) = (speed, load, angle_deg)
    # Broadcasting for scalar/array mix:
    L, S, A = np.broadcast_arrays(load, speed, angle_deg)
    pts = np.column_stack([S.ravel(), L.ravel(), A.ravel()])

    w = k/0.1*interp(pts).reshape(S.shape)*speed
    return w
